/**
 * @vercel/remix v2.8.1
 *
 * Copyright (c) Vercel, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tsMorph = require('ts-morph');
var path = require('path');
var fs = require('fs');
var staticConfig = require('@vercel/static-config');

function hash(config) {
  let str = JSON.stringify(config);
  return Buffer.from(str).toString("base64url");
}
function flattenAndSort(o) {
  let n = {};
  let keys = [];
  for (let key in o) keys.push(key);
  for (let key of keys.sort()) n[key] = o[key];
  return n;
}
function vercelPreset() {
  let project = new tsMorph.Project();
  let entryServerPath;
  let routeConfigs = new Map();
  let bundleConfigs = new Map();
  function getRouteConfig(branch, index = branch.length - 1) {
    let route = branch[index];
    let config = routeConfigs.get(route.id);
    if (!config) {
      // @ts-expect-error TODO: figure out why TypeScript is complaining hereâ€¦
      config = staticConfig.getConfig(project, route.file) || {};
      if (index > 0) {
        Object.setPrototypeOf(config, getRouteConfig(branch, index - 1));
      }
      routeConfigs.set(route.id, config);
    }
    return config;
  }
  function createServerBundles(remixUserConfig) {
    return ({
      branch
    }) => {
      let config = getRouteConfig(branch);
      if (!config.runtime) {
        config.runtime = "nodejs";
      }

      // If there are any "edge" runtime routes, then a special
      // `entry.server` needs to be used. So copy that file into
      // the app directory.
      if (config.runtime === "edge" && !entryServerPath) {
        let appDirectory = remixUserConfig.appDirectory ?? "app";

        // Print a warning if the project has an `entry.server` file
        let entryServerFile = fs.readdirSync(appDirectory).find(f => path.basename(f, path.extname(f)) === 'entry.server');
        if (entryServerFile) {
          console.warn(`WARN: Vercel uses its own \`enter.server\` file, so the file "${path.join(appDirectory, entryServerFile)}" has been deleted.`);
          console.warn(`WARN: You should commit this change.`);
        }
        entryServerPath = path.join(appDirectory, "entry.server.jsx");
        fs.cpSync(path.join(__dirname, "defaults/entry.server.jsx"), entryServerPath);
      }
      config = flattenAndSort(config);
      let id = `${config.runtime}-${hash(config)}`;
      if (!bundleConfigs.has(id)) {
        bundleConfigs.set(id, config);
      }
      return id;
    };
  }
  let buildEnd = ({
    buildManifest,
    remixConfig
  }) => {
    if (entryServerPath) {
      fs.rmSync(entryServerPath);
    }
    if (buildManifest !== null && buildManifest !== void 0 && buildManifest.serverBundles && bundleConfigs.size) {
      for (let bundle of Object.values(buildManifest.serverBundles)) {
        let bundleWtihConfig = {
          ...bundle,
          config: bundleConfigs.get(bundle.id)
        };
        buildManifest.serverBundles[bundle.id] = bundleWtihConfig;
      }
    }
    if (buildManifest !== null && buildManifest !== void 0 && buildManifest.routes && routeConfigs.size) {
      for (let route of Object.values(buildManifest.routes)) {
        let routeWtihConfig = {
          ...route,
          config: routeConfigs.get(route.id)
        };
        buildManifest.routes[route.id] = routeWtihConfig;
      }
    }
    let json = JSON.stringify({
      buildManifest,
      remixConfig
    }, null, 2);
    fs.mkdirSync(".vercel", {
      recursive: true
    });
    fs.writeFileSync(".vercel/remix-build-result.json", `${json}\n`);
  };
  return {
    name: "vercel",
    remixConfig({
      remixUserConfig
    }) {
      return {
        /**
         * Invoked once per leaf route. Reads the `export const config`
         * of the route file (and all parent routes) and hashes the
         * combined config to determine the server bundle ID.
         */
        serverBundles: remixUserConfig.ssr !== false ? createServerBundles(remixUserConfig) : undefined,
        /**
         * Invoked at the end of the `remix vite:build` command.
         *   - Clean up the `entry.server` file if one was copied.
         *   - Serialize the `buildManifest` and `remixConfig` objects
         *     to the `.vercel/remix-build-result.json` file, including
         *     the static configs parsed from each route and server bundle.
         */
        buildEnd
      };
    }
  };
}

exports.vercelPreset = vercelPreset;
